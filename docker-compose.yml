name: blogapi

services:
  # üóÑÔ∏è MongoDB para desenvolvimento local (Cen√°rio PRISMA)
  # Configurado como replica set - REQUERIDO pelo Prisma 6+
  mongodb:
    image: mongo:7.0
    container_name: blogapi-mongodb
    ports:
      - "27017:27017"  # Exp√µe a porta padr√£o do MongoDB
    environment:
      MONGO_INITDB_DATABASE: blog  # Cria database 'blog' automaticamente
    volumes:
      - mongodb-data:/data/db       # Persist√™ncia dos dados
      - mongodb-config:/data/configdb # Persist√™ncia da configura√ß√£o
    command: ["--replSet", "rs0", "--bind_ip_all"]  # Replica set para Prisma + aceita conex√µes externas
    restart: unless-stopped  # Reinicia automaticamente se falhar
    networks:
      - blog-network
    labels:
      - "com.blogapi.description=Banco de Dados MongoDB 7.0 com Replica Set"
      - "com.blogapi.service=database"
      - "com.blogapi.tier=data"
      - "com.blogapi.technology=MongoDB"
      - "com.blogapi.port=27017"
    healthcheck:
      # Health check inteligente: inicia replica set se n√£o existir
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'localhost:27017'}]}) }" | mongosh --quiet
      interval: 5s      # Verifica a cada 5 segundos
      timeout: 30s      # Timeout de 30 segundos
      start_period: 10s # Aguarda 10s antes de come√ßar checks
      start_interval: 1s # Intervalo inicial de 1s
      retries: 30       # 30 tentativas antes de marcar como n√£o saud√°vel

  # üìä DynamoDB Local (Cen√°rio DYNAMODB_LOCAL)
  # Para testes pr√©-produ√ß√£o e desenvolvimento com DynamoDB
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: blogapi-dynamodb
    ports:
      - "8000:8000"  # Porta padr√£o do DynamoDB Local
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    volumes:
      - dynamodb-data:/home/dynamodblocal/data  # Persist√™ncia dos dados
    working_dir: /home/dynamodblocal
    restart: unless-stopped
    networks:
      - blog-network
    labels:
      - "com.blogapi.description=DynamoDB Local - Banco NoSQL para desenvolvimento"
      - "com.blogapi.service=database"
      - "com.blogapi.tier=data"
      - "com.blogapi.technology=DynamoDB"
      - "com.blogapi.port=8000"
      - "com.blogapi.environment=development"
    healthcheck:
      # Verifica se o processo DynamoDB est√° rodando
      test: ["CMD-SHELL", "ps aux | grep DynamoDBLocal.jar | grep -v grep || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # üé® Prisma Studio (Interface Visual para MongoDB)
  # GUI para visualizar e manipular dados do MongoDB
  # üåê Acesse em: http://localhost:5555
  prisma-studio:
    image: node:20-alpine
    container_name: blogapi-prisma-studio
    ports:
      - "5555:5555"  # Interface web do Prisma Studio
    working_dir: /app
    volumes:
      - .:/app  # Monta o c√≥digo fonte para acessar schema.prisma
      - prisma-node-modules:/app/node_modules  # Cache de node_modules
    command: >
      sh -c "
        npm install &&                    # Instala depend√™ncias
        npx prisma generate &&            # Gera Prisma Client
        npx prisma studio --port 5555 --browser none"  # Inicia Studio sem abrir browser
    environment:
      DATABASE_URL: "mongodb://mongodb:27017/blog?replicaSet=rs0&directConnection=true"
    depends_on:
      mongodb:
        condition: service_healthy  # S√≥ inicia quando MongoDB estiver saud√°vel
    restart: unless-stopped
    networks:
      - blog-network
    labels:
      - "com.blogapi.description=Prisma Studio - Interface visual para MongoDB"
      - "com.blogapi.service=gui"
      - "com.blogapi.tier=tools"
      - "com.blogapi.technology=Prisma"
      - "com.blogapi.port=5555"
      - "com.blogapi.url=http://localhost:5555"
    healthcheck:
      # Verifica se Prisma Studio est√° respondendo na porta 5555
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5555"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # üìà DynamoDB Admin (Interface Visual para DynamoDB Local)
  # GUI para visualizar e manipular dados do DynamoDB
  # üåê Acesse em: http://localhost:8001
  dynamodb-admin:
    image: node:20-alpine
    container_name: blogapi-dynamodb-admin
    ports:
      - "8001:8001"  # Interface web do DynamoDB Admin
    environment:
      DYNAMO_ENDPOINT: http://dynamodb-local:8000  # Conecta ao DynamoDB Local
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: local      # Credenciais para desenvolvimento
      AWS_SECRET_ACCESS_KEY: local
    command: >
      sh -c "
        sleep 10 &&                       # Aguarda DynamoDB inicializar
        npm install -g dynamodb-admin &&  # Instala dynamodb-admin globalmente
        dynamodb-admin"                   # Inicia a interface
    depends_on:
      dynamodb-local:
        condition: service_healthy  # Aguarda DynamoDB ficar saud√°vel
    restart: unless-stopped
    networks:
      - blog-network
    labels:
      - "com.blogapi.description=DynamoDB Admin - Interface visual para DynamoDB Local"
      - "com.blogapi.service=gui"
      - "com.blogapi.tier=tools"
      - "com.blogapi.technology=DynamoDB Admin"
      - "com.blogapi.port=8001"
      - "com.blogapi.url=http://localhost:8001"
    healthcheck:
      # Verifica se DynamoDB Admin est√° respondendo na porta 8001
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8001"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # üöÄ Aplica√ß√£o NestJS (Servi√ßo Principal)
  # Container de desenvolvimento com hot reload
  # üåê Acesse em: http://localhost:4000 | Swagger: http://localhost:4000/docs
  app:
    image: node:20-alpine
    container_name: blogapi-app
    ports:
      - "4000:4000"  # API REST - Swagger dispon√≠vel em /docs
      - "9229:9229"  # Porta para debugging
    working_dir: /app
    volumes:
      - .:/app                    # Monta c√≥digo fonte para hot reload
      - app-node-modules:/app/node_modules  # Cache de node_modules
    command: >
      sh -c "
        npm install &&            # Instala depend√™ncias (se necess√°rio)
        npm run prisma:generate && # Gera Prisma Client
        npm run dev"              # Inicia desenvolvimento com hot reload
    environment:
      # Configura√ß√µes b√°sicas do servidor
      NODE_ENV: development
      PORT: 4000
      HOST: 0.0.0.0              # Escuta em todas as interfaces
      LOG_LEVEL: debug
      
      # üóÑÔ∏è Configura√ß√£o MongoDB (Cen√°rio PRISMA - Desenvolvimento)
      DATABASE_PROVIDER: PRISMA
      DATABASE_URL: "mongodb://mongodb:27017/blog?replicaSet=rs0&directConnection=true"
      
      # üìä Configura√ß√£o DynamoDB Local (Cen√°rio DYNAMODB_LOCAL - Alternativo)
      DYNAMODB_ENDPOINT: http://dynamodb-local:8000
      DYNAMODB_TABLE_PREFIX: blog-dev
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
      
      # üîê Configura√ß√£o AWS Cognito (RainerSoftCognito)
      COGNITO_USER_POOL_ID: us-east-1_wryiyhbWC
      COGNITO_CLIENT_ID: 3ueos5ofu499je6ebc5u98n35h
      COGNITO_REGION: us-east-1
      COGNITO_ISSUER: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_wryiyhbWC
      JWT_SECRET: 1vLG1UVpIFyhWLWubWc4Vuo3S3ritN9t/B9arxjKRL2aMGeiZM2gOx22Z+czY1amLEbvxCoMbH9x1G1ufpA+yg==
      
      # üéØ Configura√ß√µes adicionais para desenvolvimento
      SWAGGER_ENABLED: "true"
      DEBUG: "true"
    depends_on:
      mongodb:
        condition: service_healthy      # Espera MongoDB ficar saud√°vel
    restart: unless-stopped
    networks:
      - blog-network
    labels:
      - "com.blogapi.description=Blog API - Aplica√ß√£o NestJS com Fastify"
      - "com.blogapi.service=application"
      - "com.blogapi.tier=backend"
      - "com.blogapi.technology=NestJS + Fastify + Prisma"
      - "com.blogapi.port=4000"
      - "com.blogapi.api-url=http://localhost:4000"
      - "com.blogapi.swagger-url=http://localhost:4000/docs"
      - "com.blogapi.health-url=http://localhost:4000/health"
    healthcheck:
      # Verifica se a API NestJS est√° respondendo no endpoint /health
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s  # Aguarda 60s para npm install + prisma generate + start

# üíæ Volumes para persist√™ncia de dados
volumes:
  # Volumes de dados dos bancos de dados
  mongodb-data:
    name: blogapi-mongodb-data      # Nome expl√≠cito para facil identifica√ß√£o
    driver: local                   # Driver local (arquivos no host)
    labels:
      - "com.blogapi.description=MongoDB - Dados do banco (cole√ß√µes e documentos)"
      - "com.blogapi.type=data"
      - "com.blogapi.service=mongodb"
  mongodb-config:
    name: blogapi-mongodb-config
    driver: local
    labels:
      - "com.blogapi.description=MongoDB - Configura√ß√£o do Replica Set"
      - "com.blogapi.type=config"
      - "com.blogapi.service=mongodb"
  dynamodb-data:
    name: blogapi-dynamodb-data
    driver: local
    labels:
      - "com.blogapi.description=DynamoDB Local - Dados das tabelas"
      - "com.blogapi.type=data"
      - "com.blogapi.service=dynamodb"
  
  # Volumes de cache para melhorar performance (node_modules)
  prisma-node-modules:
    name: blogapi-prisma-node-modules
    driver: local
    labels:
      - "com.blogapi.description=Prisma Studio - Cache de depend√™ncias npm"
      - "com.blogapi.type=cache"
      - "com.blogapi.service=prisma-studio"
  app-node-modules:
    name: blogapi-app-node-modules
    driver: local
    labels:
      - "com.blogapi.description=App NestJS - Cache de depend√™ncias npm"
      - "com.blogapi.type=cache"
      - "com.blogapi.service=app"

# üåê Rede isolada para comunica√ß√£o entre containers
networks:
  blog-network:
    name: blogapi-network           # Nome expl√≠cito da rede
    driver: bridge                  # Driver bridge para comunica√ß√£o interna
    labels:
      - "com.blogapi.description=Rede interna para comunica√ß√£o entre servi√ßos da BlogAPI"
      - "com.blogapi.type=network"
      - "com.blogapi.isolation=isolated"