service: rainer-portfolio-backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    NODE_ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  httpApi:
    cors: true
    authorizers:
      cognitoAuth:
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${self:provider.region}.amazonaws.com/${self:custom.cognitoUserPoolId}
        audience:
          - ${self:custom.cognitoClientId}

functions:
  api:
    handler: src/main.handler
    events:
      - httpApi:
          path: /{proxy+}
          method: ANY

  # Posts
  createPost:
    handler: src/controllers/posts.create
    events:
      - httpApi:
          path: /posts
          method: post
          authorizer:
            name: cognitoAuth
            type: jwt
            scopes: [write:posts]

  getPosts:
    handler: src/controllers/posts.getAll
    events:
      - httpApi:
          path: /posts
          method: get

  # Authors
  createAuthor:
    handler: src/controllers/authors.create
    events:
      - httpApi:
          path: /authors
          method: post
          authorizer:
            name: cognitoAuth
            type: jwt
            scopes: [write:authors]

  getAuthors:
    handler: src/controllers/authors.getAll
    events:
      - httpApi:
          path: /authors
          method: get

  # Categories
  createCategory:
    handler: src/controllers/categories.create
    events:
      - httpApi:
          path: /categories
          method: post
          authorizer:
            name: cognitoAuth
            type: jwt
            scopes: [write:categories]

  getCategories:
    handler: src/controllers/categories.getAll
    events:
      - httpApi:
          path: /categories
          method: get

  # Comments
  createComment:
    handler: src/controllers/comments.create
    events:
      - httpApi:
          path: /comments
          method: post
          authorizer:
            name: cognitoAuth
            type: jwt
            scopes: [write:comments]

  getComments:
    handler: src/controllers/comments.getAll
    events:
      - httpApi:
          path: /comments
          method: get

  # External Integrations
  createExternalIntegration:
    handler: src/controllers/external-integrations.create
    events:
      - httpApi:
          path: /external-integrations
          method: post
          authorizer:
            name: cognitoAuth
            type: jwt
            scopes: [write:integrations]

  getExternalIntegrations:
    handler: src/controllers/external-integrations.getAll
    events:
      - httpApi:
          path: /external-integrations
          method: get

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-esbuild

custom:
  esbuild:
    bundle: true
    minify: ${self:custom.minifyEnabled.${self:provider.stage}}
    sourcemap: true
    exclude: ['aws-sdk']
    target: 'node18'
    platform: 'node'
    concurrency: 10
    packager: 'npm'
    watch:
      pattern: ['src/**/*.ts']
      ignore: ['.build', 'dist', 'node_modules']

  minifyEnabled:
    prod: true
    dev: false
    staging: false

  cognitoUserPoolId: ${ssm:/rainer-portfolio/COGNITO_USER_POOL_ID, env:COGNITO_USER_POOL_ID}
  cognitoClientId: ${ssm:/rainer-portfolio/COGNITO_CLIENT_ID, env:COGNITO_CLIENT_ID}
  cognitoJwksUrl: ${ssm:/rainer-portfolio/COGNITO_JWKS_URL, env:COGNITO_JWKS_URL}

  dynamodbRegion: ${ssm:/rainer-portfolio/DYNAMODB_REGION, env:DYNAMODB_REGION}
  dynamoTableNames:
    posts: ${ssm:/rainer-portfolio/DYNAMO_TABLE_NAME_POSTS, env:DYNAMO_TABLE_NAME_POSTS}
    authors: ${ssm:/rainer-portfolio/DYNAMO_TABLE_NAME_AUTHORS, env:DYNAMO_TABLE_NAME_AUTHORS}
    categories: ${ssm:/rainer-portfolio/DYNAMO_TABLE_NAME_CATEGORIES, env:DYNAMO_TABLE_NAME_CATEGORIES}
    comments: ${ssm:/rainer-portfolio/DYNAMO_TABLE_NAME_COMMENTS, env:DYNAMO_TABLE_NAME_COMMENTS}
    references: ${ssm:/rainer-portfolio/DYNAMO_TABLE_NAME_REFERENCES, env:DYNAMO_TABLE_NAME_REFERENCES}
    externalIntegrations: ${ssm:/rainer-portfolio/DYNAMO_TABLE_NAME_EXTERNAL_INTEGRATIONS, env:DYNAMO_TABLE_NAME_EXTERNAL_INTEGRATIONS}
    achievements: ${ssm:/rainer-portfolio/DYNAMO_TABLE_NAME_ACHIEVEMENTS, env:DYNAMO_TABLE_NAME_ACHIEVEMENTS}

resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableNames.posts}
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: N
          - AttributeName: postDate
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
          - AttributeName: postDate
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    AuthorsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableNames.authors}
        AttributeDefinitions:
          - AttributeName: authorId
            AttributeType: N
        KeySchema:
          - AttributeName: authorId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    CategoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableNames.categories}
        AttributeDefinitions:
          - AttributeName: categoryId
            AttributeType: N
        KeySchema:
          - AttributeName: categoryId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    CommentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableNames.comments}
        AttributeDefinitions:
          - AttributeName: commentId
            AttributeType: N
          - AttributeName: authorId
            AttributeType: S
        KeySchema:
          - AttributeName: commentId
            KeyType: HASH
          - AttributeName: authorId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ReferencesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableNames.references}
        AttributeDefinitions:
          - AttributeName: referenceId
            AttributeType: N
        KeySchema:
          - AttributeName: referenceId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ExternalIntegrationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableNames.externalIntegrations}
        AttributeDefinitions:
          - AttributeName: integrationId
            AttributeType: N
        KeySchema:
          - AttributeName: integrationId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    AchievementsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoTableNames.achievements}
        AttributeDefinitions:
          - AttributeName: achievementId
            AttributeType: N
          - AttributeName: points
            AttributeType: N
        KeySchema:
          - AttributeName: achievementId
            KeyType: HASH
          - AttributeName: points
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

  Outputs:
    ApiEndpoint:
      Description: "API Gateway endpoint URL"
      Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/"