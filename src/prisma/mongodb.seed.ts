/**
 * Seed do MongoDB - Popular Banco de Dados
 * 
 * Script para popular o MongoDB com dados iniciais de exemplo usando Prisma ORM.
 * 
 * Uso:
 * ```bash
 * npm run seed
 * # ou
 * npx tsx src/prisma/mongodb.seed.ts
 * ```
 * 
 * @fileoverview Seed do MongoDB com Prisma
 * @module prisma/mongodb.seed
 */

import { PrismaClient } from '@prisma/client';
import { nanoid } from 'nanoid';

const prisma = new PrismaClient();

/**
 * Limpa todos os dados do banco
 */
async function cleanup() {
  console.log('üßπ Limpando banco de dados...');
  
  try {
    // Deletar em ordem reversa das depend√™ncias
    await prisma.notification.deleteMany();
    console.log('   ‚úì Notifica√ß√µes removidas');
    
    await prisma.bookmark.deleteMany();
    console.log('   ‚úì Bookmarks removidos');
    
    await prisma.like.deleteMany();
    console.log('   ‚úì Likes removidos');
    
    await prisma.comment.deleteMany();
    console.log('   ‚úì Coment√°rios removidos');
    
    await prisma.post.deleteMany();
    console.log('   ‚úì Posts removidos');
    
    // Deletar subcategorias primeiro (onde parentId n√£o √© null)
    const subcategoriesDeleted = await prisma.category.deleteMany({
      where: {
        parentId: { not: null }
      }
    });
    console.log(`   ‚úì ${subcategoriesDeleted.count} subcategorias removidas`);
    
    // Depois deletar categorias principais (onde parentId √© null)
    const categoriesDeleted = await prisma.category.deleteMany({
      where: {
        parentId: null
      }
    });
    console.log(`   ‚úì ${categoriesDeleted.count} categorias principais removidas`);
    
    await prisma.user.deleteMany();
    console.log('   ‚úì Usu√°rios removidos');
    
    console.log('‚úÖ Banco limpo!');
  } catch (error: any) {
    console.warn('‚ö†Ô∏è  Aviso ao limpar banco (pode ser normal se estiver vazio):', error?.message || error);
  }
}

/**
 * Cria usu√°rios de exemplo
 */
async function seedUsers() {
  console.log('\nüë• Criando usu√°rios...');
  
  const users: any[] = [
    {
      cognitoSub: nanoid(),
      email: 'admin@blog.com',
      username: 'admin',
      name: 'Administrador Sistema',
      avatar: 'https://i.pravatar.cc/150?img=1',
      bio: 'Administrador principal do sistema. Gerencio tudo por aqui!',
      website: 'https://blog.com',
      role: 'ADMIN',
      isActive: true,
    },
    {
      cognitoSub: nanoid(),
      email: 'editor@blog.com',
      username: 'editor',
      name: 'Maria Silva',
      avatar: 'https://i.pravatar.cc/150?img=2',
      bio: 'Editora de conte√∫do. Amo revisar e aprovar posts incr√≠veis!',
      website: 'https://mariasilva.com',
      role: 'EDITOR',
      isActive: true,
    },
    {
      cognitoSub: nanoid(),
      email: 'joao@blog.com',
      username: 'joaodev',
      name: 'Jo√£o Desenvolvedor',
      avatar: 'https://i.pravatar.cc/150?img=3',
      bio: 'Desenvolvedor Full Stack apaixonado por tecnologia e boas pr√°ticas.',
      website: 'https://joaodev.com.br',
      socialLinks: {
        github: 'https://github.com/joaodev',
        linkedin: 'https://linkedin.com/in/joaodev',
        twitter: 'https://twitter.com/joaodev',
      },
      role: 'AUTHOR',
      isActive: true,
    },
    {
      cognitoSub: nanoid(),
      email: 'ana@blog.com',
      username: 'anadesigner',
      name: 'Ana Designer',
      avatar: 'https://i.pravatar.cc/150?img=4',
      bio: 'Designer UX/UI. Criando experi√™ncias digitais incr√≠veis desde 2015.',
      website: 'https://anadesigner.com',
      socialLinks: {
        behance: 'https://behance.net/anadesigner',
        dribbble: 'https://dribbble.com/anadesigner',
      },
      role: 'AUTHOR',
      isActive: true,
    },
    {
      cognitoSub: nanoid(),
      email: 'carlos@example.com',
      username: 'carlosleitor',
      name: 'Carlos Leitor',
      avatar: 'https://i.pravatar.cc/150?img=5',
      bio: 'Leitor ass√≠duo de tecnologia e desenvolvimento.',
      role: 'SUBSCRIBER',
      isActive: true,
    },
  ];

  const createdUsers = [];
  for (const userData of users) {
    const user = await prisma.user.create({ data: userData });
    createdUsers.push(user);
    console.log(`   ‚úÖ ${user.name} (@${user.username}) - ${user.role}`);
  }

  return createdUsers;
}

/**
 * Cria categorias com hierarquia de 2 n√≠veis
 */
async function seedCategories() {
  console.log('\nüìÇ Criando categorias...');
  
  // CATEGORIAS PRINCIPAIS - usando upsert para evitar duplicatas
  const tecnologia = await prisma.category.upsert({
    where: { slug: 'tecnologia' },
    update: {},
    create: {
      name: 'Tecnologia',
      slug: 'tecnologia',
      description: 'Tudo sobre tecnologia, programa√ß√£o e inova√ß√£o',
      color: '#3498DB',
      icon: 'code',
      isActive: true,
      order: 1,
    },
  });
  console.log('   ‚úÖ Tecnologia (categoria principal)');

  const design = await prisma.category.upsert({
    where: { slug: 'design' },
    update: {},
    create: {
      name: 'Design',
      slug: 'design',
      description: 'Design UX/UI, Design Gr√°fico e tend√™ncias visuais',
      color: '#E74C3C',
      icon: 'palette',
      isActive: true,
      order: 2,
    },
  });
  console.log('   ‚úÖ Design (categoria principal)');

  const carreira = await prisma.category.upsert({
    where: { slug: 'carreira' },
    update: {},
    create: {
      name: 'Carreira',
      slug: 'carreira',
      description: 'Dicas de carreira, produtividade e desenvolvimento pessoal',
      color: '#2ECC71',
      icon: 'briefcase',
      isActive: true,
      order: 3,
    },
  });
  console.log('   ‚úÖ Carreira (categoria principal)');

  // SUBCATEGORIAS DE TECNOLOGIA - usando upsert
  const frontend = await prisma.category.upsert({
    where: { slug: 'frontend' },
    update: { parentId: tecnologia.id },
    create: {
      name: 'Frontend',
      slug: 'frontend',
      description: 'React, Vue, Angular, Next.js e tecnologias frontend',
      color: '#61DAFB',
      icon: 'monitor',
      parentId: tecnologia.id,
      isActive: true,
      order: 1,
    },
  });
  console.log('   ‚úÖ Frontend (subcategoria de Tecnologia)');

  const backend = await prisma.category.upsert({
    where: { slug: 'backend' },
    update: { parentId: tecnologia.id },
    create: {
      name: 'Backend',
      slug: 'backend',
      description: 'Node.js, NestJS, APIs e arquitetura de sistemas',
      color: '#68A063',
      icon: 'server',
      parentId: tecnologia.id,
      isActive: true,
      order: 2,
    },
  });
  console.log('   ‚úÖ Backend (subcategoria de Tecnologia)');

  const devops = await prisma.category.upsert({
    where: { slug: 'devops' },
    update: { parentId: tecnologia.id },
    create: {
      name: 'DevOps',
      slug: 'devops',
      description: 'CI/CD, Docker, Kubernetes, Cloud e infraestrutura',
      color: '#FF6B35',
      icon: 'cloud',
      parentId: tecnologia.id,
      isActive: true,
      order: 3,
    },
  });
  console.log('   ‚úÖ DevOps (subcategoria de Tecnologia)');

  // SUBCATEGORIAS DE DESIGN - usando upsert
  const uxui = await prisma.category.upsert({
    where: { slug: 'ux-ui-design' },
    update: { parentId: design.id },
    create: {
      name: 'UX/UI Design',
      slug: 'ux-ui-design',
      description: 'User Experience, User Interface e Design de Produto',
      color: '#9B59B6',
      icon: 'layout',
      parentId: design.id,
      isActive: true,
      order: 1,
    },
  });
  console.log('   ‚úÖ UX/UI Design (subcategoria de Design)');

  const designGrafico = await prisma.category.upsert({
    where: { slug: 'design-grafico' },
    update: { parentId: design.id },
    create: {
      name: 'Design Gr√°fico',
      slug: 'design-grafico',
      description: 'Ilustra√ß√£o, branding e design visual',
      color: '#E67E22',
      icon: 'image',
      parentId: design.id,
      isActive: true,
      order: 2,
    },
  });
  console.log('   ‚úÖ Design Gr√°fico (subcategoria de Design)');

  // SUBCATEGORIAS DE CARREIRA - usando upsert
  const produtividade = await prisma.category.upsert({
    where: { slug: 'produtividade' },
    update: { parentId: carreira.id },
    create: {
      name: 'Produtividade',
      slug: 'produtividade',
      description: 'T√©cnicas, ferramentas e dicas para ser mais produtivo',
      color: '#1ABC9C',
      icon: 'zap',
      parentId: carreira.id,
      isActive: true,
      order: 1,
    },
  });
  console.log('   ‚úÖ Produtividade (subcategoria de Carreira)');

  return {
    tecnologia,
    design,
    carreira,
    frontend,
    backend,
    devops,
    uxui,
    designGrafico,
    produtividade,
  };
}

/**
 * Cria posts de exemplo
 */
async function seedPosts(users: any[], categories: any) {
  console.log('\nüìù Criando posts...');
  
  const posts = [
    // Posts de Frontend
    {
      title: 'Introdu√ß√£o ao React 18: O Que H√° de Novo',
      slug: 'introducao-react-18-novidades',
      content: {
        type: 'doc',
        content: [
          {
            type: 'paragraph',
            content: [
              {
                type: 'text',
                text: 'O React 18 trouxe v√°rias mudan√ßas importantes que revolucionam a forma como desenvolvemos aplica√ß√µes. Neste artigo, vamos explorar as principais novidades como Concurrent Rendering, Automatic Batching, Transitions e o novo hook useId. Prepare-se para descobrir como essas features podem melhorar significativamente a performance e experi√™ncia do usu√°rio nas suas aplica√ß√µes React.',
              },
            ],
          },
        ],
      },
      subcategoryId: categories.frontend.id,
      authorId: users[2].id, // Jo√£o Dev
      status: 'PUBLISHED',
      featured: true,
      allowComments: true,
      publishedAt: new Date('2024-10-01'),
    },
    {
      title: 'Next.js 14: Server Actions e App Router na Pr√°tica',
      slug: 'nextjs-14-server-actions-app-router',
      content: {
        type: 'doc',
        content: [
          {
            type: 'paragraph',
            content: [
              {
                type: 'text',
                text: 'Next.js 14 introduziu Server Actions, uma maneira revolucion√°ria de fazer muta√ß√µes de dados sem precisar criar rotas de API separadas. Neste tutorial completo, vamos construir uma aplica√ß√£o do zero usando App Router, Server Components e Server Actions. Voc√™ vai aprender quando usar cada abordagem e como otimizar sua aplica√ß√£o para m√°xima performance com estrat√©gias de cache inteligentes.',
              },
            ],
          },
        ],
      },
      subcategoryId: categories.frontend.id,
      authorId: users[2].id,
      status: 'PUBLISHED',
      featured: true,
      publishedAt: new Date('2024-10-05'),
    },
    // Posts de Backend
    {
      title: 'NestJS: Arquitetura Modular e Dependency Injection',
      slug: 'nestjs-arquitetura-modular-dependency-injection',
      content: {
        type: 'doc',
        content: [
          {
            type: 'paragraph',
            content: [
              {
                type: 'text',
                text: 'NestJS √© um framework Node.js que traz os melhores padr√µes de arquitetura do mundo corporativo para o JavaScript. Neste artigo detalhado, vamos explorar como estruturar uma aplica√ß√£o NestJS de forma profissional usando m√≥dulos, dependency injection, repository pattern e muito mais. Aprenda a criar APIs escal√°veis e test√°veis seguindo as melhores pr√°ticas da ind√∫stria.',
              },
            ],
          },
        ],
      },
      subcategoryId: categories.backend.id,
      authorId: users[2].id,
      status: 'PUBLISHED',
      featured: false,
      publishedAt: new Date('2024-10-10'),
    },
    {
      title: 'Prisma ORM: Do Zero √† Produ√ß√£o com MongoDB',
      slug: 'prisma-orm-zero-producao-mongodb',
      content: {
        type: 'doc',
        content: [
          {
            type: 'paragraph',
            content: [
              {
                type: 'text',
                text: 'Prisma √© um ORM moderno que facilita o trabalho com bancos de dados em aplica√ß√µes Node.js e TypeScript. Neste guia completo, vamos desde a instala√ß√£o e configura√ß√£o inicial at√© patterns avan√ßados de queries, migrations, rela√ß√µes complexas e otimiza√ß√µes de performance. Descubra como o Prisma pode transformar sua experi√™ncia de desenvolvimento com type-safety completo e produtividade m√°xima.',
              },
            ],
          },
        ],
      },
      subcategoryId: categories.backend.id,
      authorId: users[2].id,
      status: 'PUBLISHED',
      publishedAt: new Date('2024-10-12'),
    },
    // Posts de DevOps
    {
      title: 'Docker para Desenvolvedores: Guia Pr√°tico Completo',
      slug: 'docker-para-desenvolvedores-guia-pratico',
      content: {
        type: 'doc',
        content: [
          {
            type: 'paragraph',
            content: [
              {
                type: 'text',
                text: 'Docker revolucionou a forma como desenvolvemos e deployamos aplica√ß√µes. Neste guia pr√°tico e hands-on, voc√™ vai aprender a containerizar suas aplica√ß√µes, criar Dockerfiles otimizados, usar Docker Compose para ambientes complexos, trabalhar com volumes e networks, e preparar suas aplica√ß√µes para produ√ß√£o. Inclui exemplos reais com Node.js, MongoDB, Redis e muito mais.',
              },
            ],
          },
        ],
      },
      subcategoryId: categories.devops.id,
      authorId: users[2].id,
      status: 'PUBLISHED',
      publishedAt: new Date('2024-10-08'),
    },
    // Posts de UX/UI
    {
      title: 'Princ√≠pios de Design de Interface: O Guia Definitivo',
      slug: 'principios-design-interface-guia-definitivo',
      content: {
        type: 'doc',
        content: [
          {
            type: 'paragraph',
            content: [
              {
                type: 'text',
                text: 'Design de interface vai muito al√©m de fazer algo bonito. Envolve entender psicologia, acessibilidade, hierarquia visual e experi√™ncia do usu√°rio. Neste artigo abrangente, vamos explorar os 10 princ√≠pios fundamentais de design de interface que todo designer e desenvolvedor deve conhecer. Aprenda a criar interfaces que s√£o n√£o apenas visualmente atraentes, mas tamb√©m intuitivas, acess√≠veis e eficientes.',
              },
            ],
          },
        ],
      },
      subcategoryId: categories.uxui.id,
      authorId: users[3].id, // Ana Designer
      status: 'PUBLISHED',
      featured: true,
      publishedAt: new Date('2024-10-03'),
    },
    {
      title: 'Figma: Do B√°sico ao Avan√ßado em Design Systems',
      slug: 'figma-basico-avancado-design-systems',
      content: {
        type: 'doc',
        content: [
          {
            type: 'paragraph',
            content: [
              {
                type: 'text',
                text: 'Figma se tornou a ferramenta n√∫mero um para design de interfaces e colabora√ß√£o em equipe. Neste curso pr√°tico, vamos desde os conceitos b√°sicos at√© a cria√ß√£o de Design Systems completos e escal√°veis. Aprenda a usar Auto Layout, Components, Variants, e a organizar seus arquivos de forma profissional. Inclui templates e exemplos reais de empresas de tecnologia.',
              },
            ],
          },
        ],
      },
      subcategoryId: categories.uxui.id,
      authorId: users[3].id,
      status: 'PUBLISHED',
      publishedAt: new Date('2024-10-07'),
    },
    // Posts de Produtividade
    {
      title: 'GTD (Getting Things Done): Sistema Completo de Produtividade',
      slug: 'gtd-getting-things-done-sistema-produtividade',
      content: {
        type: 'doc',
        content: [
          {
            type: 'paragraph',
            content: [
              {
                type: 'text',
                text: 'Getting Things Done √© um dos sistemas de produtividade mais populares e eficazes do mundo. Criado por David Allen, o GTD ajuda voc√™ a organizar todas as suas tarefas, projetos e compromissos de forma que sua mente fique livre para ser criativa. Neste guia completo, vou mostrar como implementar o GTD do zero, quais ferramentas usar e como adaptar o sistema para sua realidade.',
              },
            ],
          },
        ],
      },
      subcategoryId: categories.produtividade.id,
      authorId: users[1].id, // Maria Editor
      status: 'PUBLISHED',
      publishedAt: new Date('2024-10-09'),
    },
    // Post em rascunho
    {
      title: 'AWS Lambda: Serverless na Pr√°tica com Node.js',
      slug: 'aws-lambda-serverless-pratica-nodejs',
      content: {
        type: 'doc',
        content: [
          {
            type: 'paragraph',
            content: [
              {
                type: 'text',
                text: 'AWS Lambda permite executar c√≥digo sem provisionar servidores, pagando apenas pelo tempo de computa√ß√£o usado. Neste tutorial, vamos criar uma aplica√ß√£o serverless completa usando Lambda, API Gateway, DynamoDB e S3. Aprenda a estruturar seu c√≥digo, gerenciar vari√°veis de ambiente, monitorar logs e otimizar custos.',
              },
            ],
          },
        ],
      },
      subcategoryId: categories.devops.id,
      authorId: users[2].id,
      status: 'DRAFT',
      featured: false,
    },
  ];

  const createdPosts = [];
  for (const postData of posts) {
    const post = await prisma.post.create({ data: postData as any });
    createdPosts.push(post);
    console.log(`   ‚úÖ "${post.title}" (${post.status})`);
  }

  // Atualizar contador de posts nas categorias
  await prisma.category.update({
    where: { id: categories.frontend.id },
    data: { postsCount: 2 },
  });
  await prisma.category.update({
    where: { id: categories.backend.id },
    data: { postsCount: 2 },
  });
  await prisma.category.update({
    where: { id: categories.devops.id },
    data: { postsCount: 2 },
  });
  await prisma.category.update({
    where: { id: categories.uxui.id },
    data: { postsCount: 2 },
  });
  await prisma.category.update({
    where: { id: categories.produtividade.id },
    data: { postsCount: 1 },
  });

  // Atualizar contador de posts dos autores
  await prisma.user.update({
    where: { id: users[2].id },
    data: { postsCount: 5 },
  });
  await prisma.user.update({
    where: { id: users[3].id },
    data: { postsCount: 2 },
  });
  await prisma.user.update({
    where: { id: users[1].id },
    data: { postsCount: 1 },
  });

  return createdPosts;
}

/**
 * Cria coment√°rios de exemplo (incluindo threads)
 */
async function seedComments(users: any[], posts: any[]) {
  console.log('\nüí¨ Criando coment√°rios...');
  
  // Coment√°rio no post de React
  const comment1 = await prisma.comment.create({
    data: {
      content: 'Excelente artigo! O Concurrent Rendering realmente muda o jogo. J√° estou usando no meu projeto e a diferen√ßa de performance √© not√°vel.',
      authorId: users[4].id, // Carlos
      postId: posts[0].id,
      isApproved: true,
    },
  });
  console.log('   ‚úÖ Coment√°rio de Carlos no post de React');

  // Resposta ao coment√°rio (thread)
  const comment2 = await prisma.comment.create({
    data: {
      content: 'Que bom que gostou, Carlos! O Concurrent Rendering √© mesmo impressionante. Voc√™ j√° experimentou o Suspense para data fetching?',
      authorId: users[2].id, // Jo√£o (autor do post)
      postId: posts[0].id,
      parentId: comment1.id,
      isApproved: true,
    },
  });
  console.log('   ‚úÖ Resposta de Jo√£o para Carlos (thread)');

  // Coment√°rio no post de Next.js
  const comment3 = await prisma.comment.create({
    data: {
      content: 'Server Actions s√£o o futuro! N√£o preciso mais criar rotas de API separadas. Isso economiza muito tempo e deixa o c√≥digo mais limpo.',
      authorId: users[3].id, // Ana
      postId: posts[1].id,
      isApproved: true,
    },
  });
  console.log('   ‚úÖ Coment√°rio de Ana no post de Next.js');

  // Coment√°rio no post de NestJS
  const comment4 = await prisma.comment.create({
    data: {
      content: 'NestJS √© incr√≠vel para projetos grandes. A arquitetura modular facilita muito a manuten√ß√£o. Estou migrando meu projeto Express para NestJS.',
      authorId: users[4].id,
      postId: posts[2].id,
      isApproved: true,
    },
  });
  console.log('   ‚úÖ Coment√°rio de Carlos no post de NestJS');

  // Coment√°rio aguardando modera√ß√£o
  const comment5 = await prisma.comment.create({
    data: {
      content: 'Adorei o artigo sobre Figma! Muito √∫til para iniciantes.',
      authorId: users[4].id,
      postId: posts[5].id,
      isApproved: false, // Aguardando aprova√ß√£o
    },
  });
  console.log('   ‚úÖ Coment√°rio aguardando modera√ß√£o');

  // Atualizar contador de coment√°rios nos posts
  await prisma.post.update({
    where: { id: posts[0].id },
    data: { commentsCount: 2 },
  });
  await prisma.post.update({
    where: { id: posts[1].id },
    data: { commentsCount: 1 },
  });
  await prisma.post.update({
    where: { id: posts[2].id },
    data: { commentsCount: 1 },
  });
  await prisma.post.update({
    where: { id: posts[5].id },
    data: { commentsCount: 1 },
  });

  // Atualizar contador de coment√°rios dos usu√°rios
  await prisma.user.update({
    where: { id: users[4].id },
    data: { commentsCount: 3 },
  });
  await prisma.user.update({
    where: { id: users[2].id },
    data: { commentsCount: 1 },
  });
  await prisma.user.update({
    where: { id: users[3].id },
    data: { commentsCount: 1 },
  });

  return [comment1, comment2, comment3, comment4, comment5];
}

/**
 * Cria likes de exemplo
 */
async function seedLikes(users: any[], posts: any[]) {
  console.log('\n‚ù§Ô∏è  Criando likes...');
  
  const likes = [
    // Carlos curtiu v√°rios posts
    { userId: users[4].id, postId: posts[0].id },
    { userId: users[4].id, postId: posts[1].id },
    { userId: users[4].id, postId: posts[2].id },
    { userId: users[4].id, postId: posts[4].id },
    
    // Ana curtiu posts de tech
    { userId: users[3].id, postId: posts[0].id },
    { userId: users[3].id, postId: posts[1].id },
    { userId: users[3].id, postId: posts[2].id },
    
    // Jo√£o curtiu posts de design
    { userId: users[2].id, postId: posts[5].id },
    { userId: users[2].id, postId: posts[6].id },
    
    // Maria curtiu v√°rios
    { userId: users[1].id, postId: posts[0].id },
    { userId: users[1].id, postId: posts[5].id },
  ];

  for (const likeData of likes) {
    await prisma.like.create({ data: likeData });
  }
  console.log(`   ‚úÖ ${likes.length} likes criados`);

  // Atualizar contadores nos posts
  await prisma.post.update({ where: { id: posts[0].id }, data: { likesCount: 3 } });
  await prisma.post.update({ where: { id: posts[1].id }, data: { likesCount: 2 } });
  await prisma.post.update({ where: { id: posts[2].id }, data: { likesCount: 2 } });
  await prisma.post.update({ where: { id: posts[4].id }, data: { likesCount: 1 } });
  await prisma.post.update({ where: { id: posts[5].id }, data: { likesCount: 2 } });
  await prisma.post.update({ where: { id: posts[6].id }, data: { likesCount: 1 } });

  return likes;
}

/**
 * Cria bookmarks de exemplo
 */
async function seedBookmarks(users: any[], posts: any[]) {
  console.log('\nüîñ Criando bookmarks...');
  
  const bookmarks = [
    // Carlos salvou posts para ler depois
    {
      userId: users[4].id,
      postId: posts[0].id,
      collection: 'Para Ler Depois',
      notes: 'Preciso estudar Concurrent Rendering com calma',
    },
    {
      userId: users[4].id,
      postId: posts[3].id,
      collection: 'Estudar',
      notes: 'Importante para o projeto atual',
    },
    
    // Ana salvou posts de refer√™ncia
    {
      userId: users[3].id,
      postId: posts[1].id,
      collection: 'Favoritos',
    },
    {
      userId: users[3].id,
      postId: posts[2].id,
      collection: 'Aprender Backend',
      notes: 'NestJS parece interessante para projetos grandes',
    },
    
    // Jo√£o salvou posts de design
    {
      userId: users[2].id,
      postId: posts[5].id,
      collection: 'Design Inspiration',
    },
  ];

  for (const bookmarkData of bookmarks) {
    await prisma.bookmark.create({ data: bookmarkData });
  }
  console.log(`   ‚úÖ ${bookmarks.length} bookmarks criados`);

  // Atualizar contadores nos posts
  await prisma.post.update({ where: { id: posts[0].id }, data: { bookmarksCount: 1 } });
  await prisma.post.update({ where: { id: posts[1].id }, data: { bookmarksCount: 1 } });
  await prisma.post.update({ where: { id: posts[2].id }, data: { bookmarksCount: 1 } });
  await prisma.post.update({ where: { id: posts[3].id }, data: { bookmarksCount: 1 } });
  await prisma.post.update({ where: { id: posts[5].id }, data: { bookmarksCount: 1 } });

  return bookmarks;
}

/**
 * Cria notifica√ß√µes de exemplo
 */
async function seedNotifications(users: any[], posts: any[]) {
  console.log('\nüîî Criando notifica√ß√µes...');
  
  const notifications = [
    // Notifica√ß√£o de novo coment√°rio para Jo√£o
    {
      type: 'NEW_COMMENT',
      title: 'Novo Coment√°rio',
      message: 'Carlos comentou no seu post "Introdu√ß√£o ao React 18"',
      link: `/posts/${posts[0].id}`,
      userId: users[2].id,
      isRead: false,
      metadata: {
        postId: posts[0].id,
        commentAuthor: 'Carlos Leitor',
      },
    },
    // Notifica√ß√£o de like
    {
      type: 'NEW_LIKE',
      title: 'Novo Like',
      message: 'Ana Designer curtiu seu post "Next.js 14: Server Actions"',
      link: `/posts/${posts[1].id}`,
      userId: users[2].id,
      isRead: true,
      readAt: new Date('2024-10-11'),
      metadata: {
        postId: posts[1].id,
        likeAuthor: 'Ana Designer',
      },
    },
    // Notifica√ß√£o de post publicado
    {
      type: 'POST_PUBLISHED',
      title: 'Post Publicado',
      message: 'Seu post "Prisma ORM: Do Zero √† Produ√ß√£o" foi publicado com sucesso!',
      link: `/posts/${posts[3].id}`,
      userId: users[2].id,
      isRead: true,
      readAt: new Date('2024-10-12'),
    },
    // Notifica√ß√£o para Ana
    {
      type: 'NEW_COMMENT',
      title: 'Novo Coment√°rio',
      message: 'Carlos comentou no seu post "Figma: Do B√°sico ao Avan√ßado"',
      link: `/posts/${posts[5].id}`,
      userId: users[3].id,
      isRead: false,
    },
    // Notifica√ß√£o do sistema
    {
      type: 'SYSTEM',
      title: 'Bem-vindo ao Blog!',
      message: 'Obrigado por se cadastrar. Explore nossos artigos e n√£o se esque√ßa de deixar seus coment√°rios!',
      userId: users[4].id,
      isRead: false,
    },
  ];

  for (const notificationData of notifications) {
    await prisma.notification.create({ data: notificationData as any });
  }
  console.log(`   ‚úÖ ${notifications.length} notifica√ß√µes criadas`);

  return notifications;
}

/**
 * Incrementa views em alguns posts
 */
async function updateViews(posts: any[]) {
  console.log('\nüëÅÔ∏è  Atualizando visualiza√ß√µes...');
  
  await prisma.post.update({ where: { id: posts[0].id }, data: { views: 1250 } });
  await prisma.post.update({ where: { id: posts[1].id }, data: { views: 890 } });
  await prisma.post.update({ where: { id: posts[2].id }, data: { views: 650 } });
  await prisma.post.update({ where: { id: posts[3].id }, data: { views: 420 } });
  await prisma.post.update({ where: { id: posts[4].id }, data: { views: 580 } });
  await prisma.post.update({ where: { id: posts[5].id }, data: { views: 720 } });
  await prisma.post.update({ where: { id: posts[6].id }, data: { views: 310 } });
  
  console.log('   ‚úÖ Views atualizadas');
}

/**
 * Fun√ß√£o principal de seed
 */
async function main() {
  console.log('\nüå± Iniciando seed do banco de dados...\n');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  
  try {
    // Limpar banco
    await cleanup();

    // Criar dados
    const users = await seedUsers();
    const categories = await seedCategories();
    const posts = await seedPosts(users, categories);
    const comments = await seedComments(users, posts);
    const likes = await seedLikes(users, posts);
    const bookmarks = await seedBookmarks(users, posts);
    const notifications = await seedNotifications(users, posts);
    
    // Atualizar views
    await updateViews(posts);

    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('\n‚úÖ Seed conclu√≠do com sucesso!\n');
    console.log('üìä Resumo:');
    console.log(`   ‚Ä¢ ${users.length} usu√°rios`);
    console.log(`   ‚Ä¢ 9 categorias (3 principais + 6 subcategorias)`);
    console.log(`   ‚Ä¢ ${posts.length} posts (${posts.filter(p => p.status === 'PUBLISHED').length} publicados, ${posts.filter(p => p.status === 'DRAFT').length} rascunho)`);
    console.log(`   ‚Ä¢ ${comments.length} coment√°rios (${comments.filter((c: any) => c.isApproved).length} aprovados)`);
    console.log(`   ‚Ä¢ ${likes.length} likes`);
    console.log(`   ‚Ä¢ ${bookmarks.length} bookmarks`);
    console.log(`   ‚Ä¢ ${notifications.length} notifica√ß√µes (${notifications.filter((n: any) => !n.isRead).length} n√£o lidas)`);
    console.log('\nüéâ Banco de dados populado e pronto para uso!\n');
    
  } catch (error) {
    console.error('\n‚ùå Erro ao popular banco:', error);
    throw error;
  }
}

// Executar seed
main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

