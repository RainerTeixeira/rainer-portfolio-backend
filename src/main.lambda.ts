import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { Context as LambdaContext, APIGatewayProxyEvent as LambdaEvent } from 'aws-lambda';
import { FastifyAdapter, NestFastifyApplication } from '@nestjs/platform-fastify';
import serverless from 'serverless-http';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger'; // Importe os m√≥dulos do Swagger UI

// Vari√°vel para armazenar em cache a inst√¢ncia do servidor NestJS para otimizar cold starts.
// 'cachedServer' mant√©m a inst√¢ncia do servidor entre invoca√ß√µes da Lambda, evitando reinicializa√ß√µes desnecess√°rias.
let cachedServer: ReturnType<typeof serverless> | null = null;

/**
 * Fun√ß√£o auxiliar para logar erros de forma detalhada no console.
 * Ajuda no debugging, especialmente em ambiente Lambda, onde logs s√£o cruciais.
 * @param error Objeto de erro desconhecido.
 */
function logError(error: unknown): void {
  if (error instanceof Error) {
    // Se for um objeto Error, loga a mensagem e o stacktrace (se dispon√≠vel).
    console.error('Erro:', error.stack || error.message);
  } else {
    // Se for um erro desconhecido, loga uma mensagem gen√©rica.
    console.error('Erro desconhecido:', error);
  }
}

async function setupSwagger(app: NestFastifyApplication) {
  const config = new DocumentBuilder()
    .setTitle('API do Rainer Portfolio') // T√≠tulo da documenta√ß√£o no Swagger UI
    .setDescription('API Backend para o Portf√≥lio do Rainer Teixeira') // Descri√ß√£o da API
    .setVersion('1.0') // Vers√£o da API
    .addTag('portfolio') // Tag para agrupar as rotas (opcional)
    .build(); // Finaliza a configura√ß√£o do DocumentBuilder

  const document = SwaggerModule.createDocument(app, config); // Cria o documento de especifica√ß√£o OpenAPI (Swagger)
  SwaggerModule.setup('api', app, document); // Configura o Swagger UI para ser servido na rota /api
  // Agora voc√™ pode acessar a documenta√ß√£o em http://localhost:3000/api no seu navegador
}

/**
 * @swagger
 * /:
 *   get:
 *     summary: Retorna a p√°gina inicial da API
 *     description: Retorna uma mensagem de boas-vindas para verificar se a API est√° funcionando.
 *     responses:
 *       200:
 *         description: P√°gina inicial exibida com sucesso.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Bem-vindo √† API do Portf√≥lio do Rainer!"
 */
async function bootstrapServer(): Promise<ReturnType<typeof serverless>> {
  // Verifica se j√° existe uma inst√¢ncia cached do servidor.
  if (!cachedServer) {
    console.log('‚ö° Inicializando o servidor NestJS...'); // Loga o in√≠cio da inicializa√ß√£o.
    // Cria a aplica√ß√£o NestJS usando Fastify como adaptador HTTP para alta performance.
    const app = await NestFactory.create<NestFastifyApplication>(
      AppModule, // M√≥dulo raiz da aplica√ß√£o NestJS.
      new FastifyAdapter({ logger: true }), // Usa o adaptador Fastify com logging ativado (√∫til em desenvolvimento).
    );
    // Habilita CORS para permitir requisi√ß√µes de diferentes origens (configurado para permitir todas as origens neste exemplo - ajuste conforme necess√°rio em produ√ß√£o).
    app.enableCors({
      origin: '*', // Permite requisi√ß√µes de qualquer origem.
      methods: 'GET,HEAD,PUT,PATCH,POST,DELETE', // M√©todos HTTP permitidos.
    });
    // Inicializa a aplica√ß√£o NestJS.
    await app.init();

    // Configura√ß√£o do Swagger UI
    await setupSwagger(app);

    // Cria um servidor "serverless" a partir da inst√¢ncia do Fastify, utilizando a biblioteca 'serverless-http'.
    // Esse servidor serverless √© compat√≠vel com o formato de eventos do AWS Lambda e API Gateway.
    cachedServer = serverless(app.getHttpAdapter().getInstance());
    console.log('‚úÖ Servidor inicializado e pronto para requisi√ß√µes!'); // Loga o sucesso na inicializa√ß√£o.
  }

  // Retorna a inst√¢ncia cached do servidor (seja a nova ou a existente).
  return cachedServer;
}

/**
 * Handler principal para AWS Lambda. Recebe eventos do Lambda Function URL e contexto de execu√ß√£o do Lambda.
 * √â o ponto de entrada da fun√ß√£o Lambda na AWS.
 * @param event Objeto de evento do Lambda Function URL, contendo detalhes da requisi√ß√£o HTTP.
 * @param context Objeto de contexto do AWS Lambda, com informa√ß√µes sobre o ambiente de execu√ß√£o.
 * @returns Promise<any> Promise que resolve com a resposta HTTP formatada para o Lambda Function URL.
 */
export const handler = async (event: LambdaEvent, context: LambdaContext) => {
  const server = await bootstrapServer();
  return server(event, context);
};

/**
 * @swagger
 * /local:
 *   get:
 *     summary: Inicializa o servidor local para desenvolvimento
 *     description: Endpoint utilizado para iniciar o servidor localmente, fora do ambiente AWS Lambda.
 *     responses:
 *       200:
 *         description: Servidor local inicializado com sucesso.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Servidor local iniciado em http://localhost:3000"
 */
if (!process.env.AWS_LAMBDA_FUNCTION_NAME) {
  async function bootstrapLocal() {
    console.log('üöÄ Iniciando servidor local...'); // Loga o in√≠cio do servidor local.
    // Cria a aplica√ß√£o NestJS usando Fastify como adaptador HTTP (sem logging detalhado para ambiente local - pode ser ajustado).
    const app = await NestFactory.create<NestFastifyApplication>(
      AppModule, // M√≥dulo raiz da aplica√ß√£o.
      new FastifyAdapter(), // Usa o adaptador Fastify para servidor local tamb√©m.
    );

    // Configura√ß√£o do Swagger UI
    await setupSwagger(app);

    // Inicia o servidor local na porta 3000 e no endere√ßo 0.0.0.0 (acess√≠vel externamente).
    await app.listen(3000, '0.0.0.0', () => {
      console.log(`üîå Servidor ouvindo em http://localhost:3000`); // Loga o endere√ßo do servidor local.
      console.log(`üìö Documenta√ß√£o Swagger em http://localhost:3000/api`); // Loga o endere√ßo da documenta√ß√£o Swagger (se configurada).
    });
  }

  // Inicializa o servidor local e trata poss√≠veis erros durante a inicializa√ß√£o.
  bootstrapLocal().catch(error => {
    console.log('üöÄ Erro ao iniciar o servidor local:'); // LOG PASSO ERRO - CATCH
    logError(error); // Loga qualquer erro que ocorra durante a inicializa√ß√£o do servidor local.
    process.exit(1); // Encerra o processo Node.js em caso de falha na inicializa√ß√£o.
  });
}
