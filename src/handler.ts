import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { Context, APIGatewayProxyEvent } from 'aws-lambda';
import { FastifyAdapter, NestFastifyApplication } from '@nestjs/platform-fastify';
import serverless from 'serverless-http';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger'; // Importe os m√≥dulos do Swagger UI

// Vari√°vel para armazenar em cache a inst√¢ncia do servidor NestJS para otimizar cold starts.
// 'cachedServer' mant√©m a inst√¢ncia do servidor entre invoca√ß√µes da Lambda, evitando reinicializa√ß√µes desnecess√°rias.
let cachedServer: any;

/**
 * Fun√ß√£o auxiliar para obter a mensagem de erro de forma segura.
 * Garante que sempre retornemos uma string, mesmo que o erro n√£o seja uma inst√¢ncia de Error.
 * @param error Objeto de erro desconhecido.
 * @returns string Mensagem de erro tratada.
 */
function getErrorMessage(error: unknown): string {
  if (error instanceof Error) return error.message; // Se for um objeto Error, retorna a mensagem padr√£o.
  return String(error); // Caso contr√°rio, converte o erro para string (seguran√ßa contra tipos inesperados).
}

/**
 * Fun√ß√£o auxiliar para logar erros de forma detalhada no console.
 * Ajuda no debugging, especialmente em ambiente Lambda, onde logs s√£o cruciais.
 * @param error Objeto de erro desconhecido.
 */
function logError(error: unknown): void {
  if (error instanceof Error) {
    // Se for um objeto Error, loga a mensagem e o stacktrace (se dispon√≠vel).
    console.error('Erro:', error.stack || error.message);
  } else {
    // Se for um erro desconhecido, loga uma mensagem gen√©rica.
    console.error('Erro desconhecido:', error);
  }
}

/**
 * @swagger
 * /:
 *   get:
 *     summary: Retorna a p√°gina inicial
 *     responses:
 *       200:
 *         description: P√°gina inicial
 */
async function bootstrapServer(): Promise<any> {
  // Verifica se j√° existe uma inst√¢ncia cached do servidor.
  if (!cachedServer) {
    console.log('‚ö° Inicializando o servidor NestJS...'); // Loga o in√≠cio da inicializa√ß√£o.

    // Cria a aplica√ß√£o NestJS usando Fastify como adaptador HTTP para alta performance.
    const app = await NestFactory.create<NestFastifyApplication>(
      AppModule, // M√≥dulo raiz da aplica√ß√£o NestJS.
      new FastifyAdapter({ logger: true }), // Usa o adaptador Fastify com logging ativado (√∫til em desenvolvimento).
    );

    // Habilita CORS para permitir requisi√ß√µes de diferentes origens (configurado para permitir todas as origens neste exemplo - ajuste conforme necess√°rio em produ√ß√£o).
    app.enableCors({
      origin: '*', // Permite requisi√ß√µes de qualquer origem.
      methods: 'GET,HEAD,PUT,PATCH,POST,DELETE', // M√©todos HTTP permitidos.
    });

    // Inicializa a aplica√ß√£o NestJS.
    await app.init();

    // ----------------------------------------------------------------------
    //  Configura√ß√£o do Swagger UI para documenta√ß√£o da API (Adicionado agora!)
    // ----------------------------------------------------------------------
    const config = new DocumentBuilder()
      .setTitle('API do Rainer Portfolio') // T√≠tulo da documenta√ß√£o no Swagger UI
      .setDescription('API Backend para o Portf√≥lio do Rainer Teixeira') // Descri√ß√£o da API
      .setVersion('1.0') // Vers√£o da API
      .addTag('portfolio') // Tag para agrupar as rotas (opcional)
      .build(); // Finaliza a configura√ß√£o do DocumentBuilder

    const document = SwaggerModule.createDocument(app, config); // Cria o documento de especifica√ß√£o OpenAPI (Swagger)

    SwaggerModule.setup('api', app, document); // Configura o Swagger UI para ser servido na rota /api
    // Agora voc√™ pode acessar a documenta√ß√£o em http://localhost:3000/api no seu navegador
    // ----------------------------------------------------------------------

    // Cria um servidor "serverless" a partir da inst√¢ncia do Fastify, utilizando a biblioteca 'serverless-http'.
    // Esse servidor serverless √© compat√≠vel com o formato de eventos do AWS Lambda e API Gateway.
    cachedServer = serverless(app.getHttpAdapter().getInstance() as any);
    console.log('‚úÖ Servidor inicializado e pronto para requisi√ß√µes!'); // Loga o sucesso na inicializa√ß√£o.
  }

  // Retorna a inst√¢ncia cached do servidor (seja a nova ou a existente).
  return cachedServer;
}

/**
 * Handler principal para AWS Lambda. Recebe eventos do API Gateway e contexto de execu√ß√£o do Lambda.
 * √â o ponto de entrada da fun√ß√£o Lambda na AWS.
 * @param event Objeto de evento do API Gateway, contendo detalhes da requisi√ß√£o HTTP.
 * @param context Objeto de contexto do AWS Lambda, com informa√ß√µes sobre o ambiente de execu√ß√£o.
 * @returns Promise<any> Promise que resolve com a resposta HTTP formatada para o API Gateway.
 */
export const handler = async (
  event: APIGatewayProxyEvent, // Evento do API Gateway.
  context: Context // Contexto do Lambda.
) => {
  try {
    // Obt√©m a inst√¢ncia do servidor (inicializando-o se for a primeira invoca√ß√£o - cold start).
    const server = await bootstrapServer();
    // Processa a requisi√ß√£o HTTP usando o servidor serverless cached.
    const response = await server(event, context);

    // Adiciona headers de seguran√ßa √† resposta para refor√ßar a seguran√ßa da aplica√ß√£o.
    response.headers = {
      ...response.headers, // Mant√©m os headers originais da resposta.
      'X-Content-Type-Options': 'nosniff', // Previne ataques de MIME-sniffing.
      'X-Frame-Options': 'DENY', // Protege contra clickjacking, negando iframe embedding.
      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains', // Habilita HSTS por 1 ano, for√ßando HTTPS.
    };

    // Retorna a resposta formatada para o API Gateway.
    return response;
  } catch (error: unknown) {
    // Em caso de erro n√£o capturado durante o processamento da requisi√ß√£o:
    logError(error); // Loga o erro detalhadamente.

    // Retorna uma resposta de erro HTTP 500 (Internal Server Error) para o cliente.
    return {
      statusCode: 500, // C√≥digo de status HTTP 500.
      headers: {
        'Content-Type': 'application/json', // Define o tipo de conte√∫do da resposta como JSON.
      },
      body: JSON.stringify({ // Converte o corpo da resposta para JSON.
        message: 'Erro interno do servidor', // Mensagem de erro gen√©rica para o cliente.
        details: process.env.NODE_ENV === 'development' // Inclui detalhes do erro (stacktrace) apenas em ambiente de desenvolvimento para n√£o expor informa√ß√µes sens√≠veis em produ√ß√£o.
          ? getErrorMessage(error) // Em desenvolvimento, retorna a mensagem de erro detalhada.
          : 'Contate o suporte t√©cnico', // Em produ√ß√£o, retorna uma mensagem amig√°vel e gen√©rica.
        timestamp: new Date().toISOString(), // Adiciona um timestamp para rastreamento do erro.
        requestId: context.awsRequestId, // Inclui o ID da requisi√ß√£o da AWS para facilitar o rastreamento nos logs da AWS.
      }),
    };
  }
};

/**
 * @swagger
 * /local:
 *   get:
 *     summary: Inicializa o servidor local
 *     responses:
 *       200:
 *         description: Servidor local inicializado
 */
if (!process.env.AWS_LAMBDA_FUNCTION_NAME) {
  async function bootstrapLocal() {
    console.log('üöÄ Iniciando servidor local... - Passo 1: Inicio da funcao bootstrapLocal'); // LOG PASS0 1
    console.log('üöÄ Iniciando servidor local...'); // Loga o in√≠cio do servidor local.

    console.log('üöÄ Iniciando servidor local... - Passo 2: Criando a aplicacao NestFactory'); // LOG PASS0 2
    // Cria a aplica√ß√£o NestJS usando Fastify como adaptador HTTP (sem logging detalhado para ambiente local - pode ser ajustado).
    const app = await NestFactory.create<NestFastifyApplication>(
      AppModule, // M√≥dulo raiz da aplica√ß√£o.
      new FastifyAdapter(), // Usa o adaptador Fastify para servidor local tamb√©m.
    );
    console.log('üöÄ Iniciando servidor local... - Passo 3: Aplicacao NestFactory Criada'); // LOG PASS0 3

    // ----------------------------------------------------------------------
    //  Configura√ß√£o do Swagger UI para documenta√ß√£o da API (Adicionado agora!)
    // ----------------------------------------------------------------------
    const config = new DocumentBuilder()
      .setTitle('API do Rainer Portfolio') // T√≠tulo da documenta√ß√£o no Swagger UI
      .setDescription('API Backend para o Portf√≥lio do Rainer Teixeira') // Descri√ß√£o da API
      .setVersion('1.0') // Vers√£o da API
      .addTag('portfolio') // Tag para agrupar as rotas (opcional)
      .build(); // Finaliza a configura√ß√£o do DocumentBuilder

    const document = SwaggerModule.createDocument(app, config); // Cria o documento de especifica√ß√£o OpenAPI (Swagger)

    SwaggerModule.setup('api', app, document); // Configura o Swagger UI para ser servido na rota /api
    // Agora voc√™ pode acessar a documenta√ß√£o em http://localhost:3000/api no seu navegador
    // ----------------------------------------------------------------------


    console.log('üöÄ Iniciando servidor local... - Passo 4: Iniciando o listen'); // LOG PASS0 4
    // Inicia o servidor local na porta 3000 e no endere√ßo 0.0.0.0 (acess√≠vel externamente).
    await app.listen(3000, '0.0.0.0', () => {
      console.log('üöÄ Iniciando servidor local... - Passo 5: Listen Iniciado - Callback'); // LOG PASS0 5
      console.log(`üîå Servidor ouvindo em http://localhost:3000`); // Loga o endere√ßo do servidor local.
      console.log(`üìö Documenta√ß√£o Swagger em http://localhost:3000/api`); // Loga o endere√ßo da documenta√ß√£o Swagger (se configurada).
    });
    console.log('üöÄ Iniciando servidor local... - Passo 6: Listen Iniciado - Fora do Callback'); // LOG PASS0 6
  }

  // Inicializa o servidor local e trata poss√≠veis erros durante a inicializa√ß√£o.
  bootstrapLocal().catch(error => {
    console.log('üöÄ Iniciando servidor local... - Passo ERRO: Dentro do Catch'); // LOG PASS0 ERRO - CATCH
    logError(error); // Loga qualquer erro que ocorra durante a inicializa√ß√£o do servidor local.
    process.exit(1); // Encerra o processo Node.js em caso de falha na inicializa√ß√£o.
  });
}