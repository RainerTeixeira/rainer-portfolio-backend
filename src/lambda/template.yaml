AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Blog API - Lambda + DynamoDB + Cognito (Free Tier)

# ═══════════════════════════════════════════════════════════════════════════
# PARÂMETROS GLOBAIS
# ═══════════════════════════════════════════════════════════════════════════
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Ambiente de deployment (dev, staging ou prod)

# ═══════════════════════════════════════════════════════════════════════════
# VARIÁVEIS GLOBAIS
# ═══════════════════════════════════════════════════════════════════════════
Globals:
  Function:
    # ⚡ Lambda Free Tier: 1M requests + 400k GB-segundos/mês GRÁTIS
    Timeout: 30  # Máximo recomendado para API
    MemorySize: 512  # 512 MB = boa performance sem custo extra
    Runtime: nodejs20.x  # Node.js 20 (mais recente)
    Architectures:
      - x86_64  # x86 tem Free Tier maior que ARM64
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        DATABASE_PROVIDER: DYNAMODB
        AWS_REGION: !Ref AWS::Region
        DYNAMODB_TABLE_PREFIX: !Sub '${AWS::StackName}-${Environment}'
        LOG_LEVEL: !If [IsProduction, warn, debug]
    Tracing: Active  # X-Ray grátis (1M traces/mês)
    Tags:
      Environment: !Ref Environment
      Application: blog-backend-api
      ManagedBy: SAM
      CostCenter: FreeTier

# ═══════════════════════════════════════════════════════════════════════════
# RECURSOS
# ═══════════════════════════════════════════════════════════════════════════
Resources:
  # ─────────────────────────────────────────────────────────────────────────
  # FUNÇÃO LAMBDA - API PRINCIPAL
  # ─────────────────────────────────────────────────────────────────────────
  BlogApiFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - handler.ts
    Properties:
      FunctionName: !Sub '${AWS::StackName}-api-${Environment}'
      Description: API principal do blog usando NestJS + Fastify
      Handler: dist/lambda/handler.lambdaHandler
      CodeUri: ../../
      
      # Function URL (alternativa gratuita ao API Gateway)
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowOrigin: '*'
          AllowHeaders: 'Content-Type,Authorization,X-Requested-With'
          AllowMethods: 'GET,POST,PUT,PATCH,DELETE,OPTIONS'
          MaxAge: '86400'
      
      # Permissões IAM
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref PostsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CommentsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref LikesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BookmarksTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # ─────────────────────────────────────────────────────────────────────────
  # TABELAS DYNAMODB
  # ─────────────────────────────────────────────────────────────────────────
  
  # ═══════════════════════════════════════════════════════════════════════════
  # TABELA: USERS (⭐ 5 RCU/WCU - Mais Acessada)
  # ═══════════════════════════════════════════════════════════════════════════
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-${Environment}-users'
      
      # 💰 FREE TIER PERMANENTE: Provisioned (não On-Demand!)
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5  # ⭐ Mais acessado (auth)
        WriteCapacityUnits: 5
      
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
        - AttributeName: username
          AttributeType: S
        - AttributeName: cognitoSub
          AttributeType: S
      
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        
        - IndexName: UsernameIndex
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        
        - IndexName: CognitoSubIndex
          KeySchema:
            - AttributeName: cognitoSub
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      
      # Backup: grátis até 10 GB (sempre habilitado)
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Resource
          Value: Users
        - Key: CostOptimization
          Value: FreeTierProvisioned

  # ═══════════════════════════════════════════════════════════════════════════
  # TABELA: POSTS (⭐ 5 RCU/WCU - Mais Acessada)
  # ═══════════════════════════════════════════════════════════════════════════
  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-${Environment}-posts'
      
      # 💰 FREE TIER PERMANENTE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5  # ⭐ Mais acessado (feed, listagens)
        WriteCapacityUnits: 5
      
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: slug
          AttributeType: S
        - AttributeName: authorId
          AttributeType: S
        - AttributeName: subcategoryId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      
      GlobalSecondaryIndexes:
        - IndexName: SlugIndex
          KeySchema:
            - AttributeName: slug
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        
        - IndexName: AuthorIndex
          KeySchema:
            - AttributeName: authorId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        
        - IndexName: SubcategoryIndex
          KeySchema:
            - AttributeName: subcategoryId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      
      
      # Backup: apenas produção
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Resource
          Value: Posts
        - Key: CostOptimization
          Value: FreeTierProvisioned

  # ═══════════════════════════════════════════════════════════════════════════
  # TABELA: CATEGORIES (3 RCU/WCU)
  # ═══════════════════════════════════════════════════════════════════════════
  CategoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-${Environment}-categories'
      
      # 💰 FREE TIER PERMANENTE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 3  # Navegação frequente
        WriteCapacityUnits: 3
      
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: slug
          AttributeType: S
        - AttributeName: parentId
          AttributeType: S
      
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      
      GlobalSecondaryIndexes:
        - IndexName: SlugIndex
          KeySchema:
            - AttributeName: slug
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
        
        - IndexName: ParentIdIndex
          KeySchema:
            - AttributeName: parentId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
      
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Resource
          Value: Categories
        - Key: CostOptimization
          Value: FreeTierProvisioned

  # ═══════════════════════════════════════════════════════════════════════════
  # TABELA: COMMENTS (3 RCU/WCU)
  # ═══════════════════════════════════════════════════════════════════════════
  CommentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-${Environment}-comments'
      
      # 💰 FREE TIER PERMANENTE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 3  # Interações médias
        WriteCapacityUnits: 3
      
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: postId
          AttributeType: S
        - AttributeName: authorId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      
      GlobalSecondaryIndexes:
        - IndexName: PostIndex
          KeySchema:
            - AttributeName: postId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
        
        - IndexName: AuthorIndex
          KeySchema:
            - AttributeName: authorId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
      
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Resource
          Value: Comments

  # ═══════════════════════════════════════════════════════════════════════════
  # TABELA: LIKES (3 RCU/WCU)
  # ═══════════════════════════════════════════════════════════════════════════
  LikesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-${Environment}-likes'
      
      # 💰 FREE TIER PERMANENTE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 3  # Curtidas frequentes
        WriteCapacityUnits: 3
      
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: postId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      
      GlobalSecondaryIndexes:
        - IndexName: PostIndex
          KeySchema:
            - AttributeName: postId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
        
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Resource
          Value: Likes
        - Key: CostOptimization
          Value: FreeTierProvisioned

  # ═══════════════════════════════════════════════════════════════════════════
  # TABELA: BOOKMARKS (3 RCU/WCU)
  # ═══════════════════════════════════════════════════════════════════════════
  BookmarksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-${Environment}-bookmarks'
      
      # 💰 FREE TIER PERMANENTE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 3  # Salvamentos médios
        WriteCapacityUnits: 3
      
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: postId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PostIndex
          KeySchema:
            - AttributeName: postId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
        
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Resource
          Value: Bookmarks
        - Key: CostOptimization
          Value: FreeTierProvisioned

  # ═══════════════════════════════════════════════════════════════════════════
  # TABELA: NOTIFICATIONS (3 RCU/WCU)
  # ═══════════════════════════════════════════════════════════════════════════
  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-${Environment}-notifications'
      
      # 💰 FREE TIER PERMANENTE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 3  # Notificações médias
        WriteCapacityUnits: 3
      
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3
      
      
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Resource
          Value: Notifications
        - Key: CostOptimization
          Value: FreeTierProvisioned

  # ─────────────────────────────────────────────────────────────────────────
  # LOGS
  # ─────────────────────────────────────────────────────────────────────────
  BlogApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${BlogApiFunction}'
      RetentionInDays: 7

# ═══════════════════════════════════════════════════════════════════════════
# OUTPUTS
# ═══════════════════════════════════════════════════════════════════════════
Outputs:
  # API
  BlogApiFunctionUrl:
    Description: URL da Function URL (endpoint HTTP da API)
    Value: !GetAtt BlogApiFunctionUrl.FunctionUrl
    Export:
      Name: !Sub '${AWS::StackName}-api-url'

  BlogApiFunctionArn:
    Description: ARN da função Lambda
    Value: !GetAtt BlogApiFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-api-arn'

  # Tabelas DynamoDB
  UsersTableName:
    Description: Nome da tabela de usuários
    Value: !Ref UsersTable
    Export:
      Name: !Sub '${AWS::StackName}-users-table'

  PostsTableName:
    Description: Nome da tabela de posts
    Value: !Ref PostsTable
    Export:
      Name: !Sub '${AWS::StackName}-posts-table'

  CategoriesTableName:
    Description: Nome da tabela de categorias
    Value: !Ref CategoriesTable
    Export:
      Name: !Sub '${AWS::StackName}-categories-table'

  CommentsTableName:
    Description: Nome da tabela de comentários
    Value: !Ref CommentsTable
    Export:
      Name: !Sub '${AWS::StackName}-comments-table'

  LikesTableName:
    Description: Nome da tabela de likes
    Value: !Ref LikesTable
    Export:
      Name: !Sub '${AWS::StackName}-likes-table'

  BookmarksTableName:
    Description: Nome da tabela de bookmarks
    Value: !Ref BookmarksTable
    Export:
      Name: !Sub '${AWS::StackName}-bookmarks-table'

  NotificationsTableName:
    Description: Nome da tabela de notificações
    Value: !Ref NotificationsTable
    Export:
      Name: !Sub '${AWS::StackName}-notifications-table'

  # Informações de deployment
  StackName:
    Description: Nome da stack CloudFormation
    Value: !Ref AWS::StackName

  Region:
    Description: Região AWS onde a stack foi deployada
    Value: !Ref AWS::Region
  
  # 💰 Resumo de Custos (FREE TIER PERMANENTE)
  FreeTierSummary:
    Description: Resumo do Free Tier AWS (Custo ZERO Permanente)
    Value: !Sub |
      ═══════════════════════════════════════════════════════════════
      💰 FREE TIER PERMANENTE - CUSTO R$ 0,00 PARA SEMPRE!
      ═══════════════════════════════════════════════════════════════
      
      📊 DynamoDB Provisioned (7 tabelas):
         ⭐ Users: 5 RCU + 5 WCU (autenticação)
         ⭐ Posts: 5 RCU + 5 WCU (feed principal)
         📄 Categories: 3 RCU + 3 WCU (navegação)
         💬 Comments: 3 RCU + 3 WCU (interações)
         ❤️  Likes: 3 RCU + 3 WCU (curtidas)
         🔖 Bookmarks: 3 RCU + 3 WCU (salvamentos)
         🔔 Notifications: 3 RCU + 3 WCU (notificações)
         ────────────────────────────────────────────
         TOTAL: 25 RCU + 25 WCU = GRÁTIS SEMPRE! ✅
      
      ⚡ Lambda:
         • 1 milhão de requests/mês = GRÁTIS
         • 400k GB-segundos compute = GRÁTIS
         • Runtime: Node.js 20.x (x86_64)
      
      🔐 Cognito User Pool:
         • 50.000 MAU (usuários ativos) = GRÁTIS
      
      📝 CloudWatch Logs:
         • 5 GB ingest/mês = GRÁTIS
         • Retenção: 7 dias (dev), 30 dias (prod)
      
      🌐 Lambda Function URL:
         • 100% GRÁTIS (sem API Gateway)
      
      🛡️ Para NÃO Ultrapassar Free Tier:
         1. Use CloudFront/cache (reduz leituras)
         2. Itens ≤ 1 KB (escrita), ≤ 4 KB (leitura)
         3. Mídia no S3, metadados no DynamoDB
         4. Configure CloudWatch Alarms
      
      ═══════════════════════════════════════════════════════════════

  Environment:
    Description: Ambiente de deployment
    Value: !Ref Environment

